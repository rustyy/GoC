<?php

/**
 * Implements hook_menu().
 * @return array
 */
function export_node_menu() {
  $items = array();

  // Export url for a single node.
  $items['node/%/export'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => '_export_node_callback',
    'page arguments' => array(1),
    'access callback' => TRUE,
    );
  // Export url for term by tid.
  $items['export_nodes/%'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => '_export_nodes_by_tid_callback',
    'page arguments' => array(1),
    'access callback' => TRUE,
    );

  // Module settings page.
  $items['admin/settings/export_node'] = array(
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('export_node_admin'),
    'access arguments' => array('administer export_node settings'),
    'title' => t('Export node settings'),
    'description' => t('Administer export node'),
    );

  return $items;
}

/**
 * Implements hook_admin().
 *
 * Adds the possibility to add htaccess data to the image src path.
 * @return mixed
 */
function export_node_admin() {
  $form = array();

  // Checkbox to activate dev mode.
  $form['node_export_dev_mode'] = array(
    '#type' => 'checkbox',
    '#title' => t('Activate Devel mode'),
    '#default_value' => variable_get('node_export_dev_mode', 0),
    );

  // Input field for host domain.
  $form['node_export_dev_host'] = array(
    '#type' => 'textfield',
    '#title' => t('Host domain'),
    '#default_value' => variable_get('node_export_dev_host'),
    );

  return system_settings_form($form);
}

/**
 * Export node page callback.
 * Returns json for a specific node.
 * @param null $arg
 */
function _export_node_callback($arg = NULL) {
  $node = node_load($arg);

  // Exit if node does not exist or is not published.
  if (!$node || $node->status == 0) {
    drupal_json_output(array('Access denied'));
    drupal_exit();
  }

  $lang = $node->language;
  $ids = array();
  $images = array();
  $term = '';
  $term = taxonomy_term_load($node->field_rubric[$lang][0]['tid']);
  $module_settings = _export_node_get_settings();

  // Get the image ids.
  foreach ($node->field_media_image[$lang] as $k) {
    $ids[] = $k['value'];
  }

  // Load field collection items.
  $fc_items = field_collection_item_load_multiple($ids);
  foreach ($fc_items as $k => $v) {
    $img_vars = array(
      'style_name' => 'mobile_1',
      'path' => $v->field_fc_image[$lang][0]['uri'],
      'alt' => $v->field_fc_image[$lang][0]['alt'] . ' - Foto: ' . $v->field_fc_copyright[$lang][0]['safe_value'],
      'title' => $v->field_fc_image[$lang][0]['title'] . ' - Foto: ' . $v->field_fc_copyright[$lang][0]['safe_value'],
      );

    $image = theme_image_style($img_vars);

    if ($module_settings['dev_mode']) {
      //@todo: improve regex.
      $image = preg_replace('@(?!http:)//\w+.\w+.\w+[^/]@i', '//' . $module_settings['host_domain'], $image);
    }

    $images[] = array(
      'image' => $image,
      'caption' => $v->field_fc_headline[$lang][0]['safe_value'],
      'copyright' => $v->field_fc_copyright[$lang][0]['safe_value'],
      );
  }

  // Get the node-id before the current being viewed.
  $prev_nid = _export_node_get_node_before($node->field_rubric[$lang][0]['tid'], $node->created);

  // Get the node posted after the current being viewed.
  $next_nid = _export_node_get_node_after($node->field_rubric[$lang][0]['tid'], $node->created);

  // Prepare json.
  $json = array(
    'category' => $term->name,
    'images' => $images,
    'headline' => $node->title,
    'kicker' => $node->field_kicker[$lang][0]['safe_value'],
    'body' => $node->body[$lang][0]['safe_value'],
    );

  if ($prev_nid) {
    $json['prev_nid'] = $prev_nid['nid'];
  }
  if ($next_nid) {
    $json['next_nid'] = $next_nid['nid'];
  }

  _export_node_output_json('export_node_callback', $json);
  drupal_exit();
}

/**
 * Export nodes callback.
 * Generates json output with nodes by category.
 * @param string $arg
 */
function _export_nodes_by_tid_callback($arg = 'all') {
  // Init variables.
  $module_settings = _export_node_get_settings();
  $node = FALSE; // Node loaded.
  $lang = 'und'; // Node's language.
  $image = FALSE; // Image loaded (field collection item).
  $term = ''; // Node Category.
  $copyright = ''; // Copyright string.
  $alt = ''; // Image alt text.
  $title = ''; // Image title text.
  $result = NULL; // query result.
  $json = array(); // Json output.

  if ($arg == 'all') {
    $q = "SELECT n.nid
    FROM {node} n
    JOIN {field_data_field_rubric} r
    ON n.nid = r.entity_id";
  }
  else {
    $q = "SELECT n.nid
    FROM {node} n
    JOIN {field_data_field_rubric} r
    ON n.nid = r.entity_id
    JOIN {taxonomy_term_hierarchy} h
    ON r.field_rubric_tid = h.tid
    WHERE r.field_rubric_tid = :tid OR h.parent = :tid";
  }

  $result = db_query($q, array(':tid' => $arg));

  foreach ($result as $record) {
    $node = node_load($record->nid);
    $lang = $node->language;
    $image = field_collection_item_load($node->field_media_image[$lang][0]['value']);
    $term = taxonomy_term_load($node->field_rubric[$lang][0]['tid'])->name;

    if (!empty($image->field_fc_copyright[$lang][0]['safe_value'])) {
      $copyright = ' - Foto: ' . $image->field_fc_copyright[$lang][0]['safe_value'];
    }

    if (!empty($image->field_fc_image[$lang][0]['alt'])) {
      $alt = $image->field_fc_image[$lang][0]['alt'];
    }

    if (!empty($image->field_fc_image[$lang][0]['title'])) {
      $title = $image->field_fc_image[$lang][0]['title'];
    }

    $img_vars = array(
      'style_name' => 'mobile_1',
      'path' => $image->field_fc_image[$lang][0]['uri'],
      'alt' => $alt . $copyright,
      'title' => $title . $copyright,
      'width' => '',
      'height' => '',
      );

    $image = theme_image_style($img_vars);

    if ($module_settings['dev_mode']) {
      //@todo: improve regex.
      $image = preg_replace('@(?!http:)//\w+.\w+.\w+[^/]@i', '//' . $module_settings['host_domain'], $image);
    }

    $json[] = array(
      'nid' => $node->nid,
      'tid' => $node->field_rubric[$lang][0]['tid'],
      'image' => $image,
      'term' => $term,
      'headline' => $node->title,
      'kicker' => $node->field_kicker[$lang][0]['safe_value'],
      );
  }

  _export_node_output_json('export_nodes_callback', $json);
  drupal_exit();
}


/**
 * Helper function that returns the module settings.
 * @return array
 */
function _export_node_get_settings() {
  $settings = array();
  $settings['dev_mode'] = variable_get('node_export_dev_mode');
  $settings['host_domain'] = variable_get('node_export_dev_host');
  return $settings;
}

/**
 * Helper function for jsonp output.
 * @param $cb
 * @param $json
 */
function _export_node_output_json($cb, $json) {
  $callback = check_plain($_REQUEST[$cb]);
  if (isset($callback) && $callback != '') {
    $response = drupal_json_encode($json);
    header("Content-type: text/javascript");
    print $callback . "(" . $response . ");";
  }
  else {
    drupal_json_output($json);
  }
}

/**
 * Helper function that returns a node posted before a given date and with a specific term id.
 * @param  integer $tid     [Term id.]
 * @param  timestamp $created [Node creation date.]
 * @return integer          [Node ID]
 */
function _export_node_get_node_before($tid, $created){
  $q = "SELECT n.nid FROM {node} n
  JOIN {field_data_field_rubric} r
  ON n.nid = r.entity_id
  WHERE r.field_rubric_tid = :tid AND n.created < :created
  LIMIT 1";
  $result = db_query($q, array(':tid' => $tid, ':created' => $created));
  return $result->fetchAssoc();
}

/**
 * Helper function that returns a node posted after a given date and with a specific term id.
 * @param  integer $tid     [Term id.]
 * @param  timestamp $created [Node creation date.]
 * @return integer          [Node ID]
 */
function _export_node_get_node_after($tid, $created) {
  $q = "SELECT n.nid
  FROM {node} n
  JOIN {field_data_field_rubric} r
  ON n.nid = r.entity_id
  WHERE r.field_rubric_tid = :tid AND n.created > :created
  LIMIT 1";
  $result = db_query($q, array(':tid' => $tid, ':created' => $created));
  return $result->fetchAssoc();
}

